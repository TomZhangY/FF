## 根日志，默认所有日志会被继承，设置additivity来取消继承
log4j.rootLogger=DEBUG,CONSOLE
## 表示Logger不会在父Logger(根日志)的appender里输出，默认为true
log4j.additivity.ff.main=true


log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender
log4j.appender.CONSOLE.Threshold=DEBUG
log4j.appender.CONSOLE.Target=System.out
log4j.appender.CONSOLE.ImmediateFlush=true
log4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout
## %d:日期时间   %p: 输出日志信息优先级  %r: 输出自应用启动到输出该log信息耗费的毫秒数
## %c: 输出日志类的全名  %t: 输出产生该日志事件的线程名  %%: 输出一个"%"字符
## %l: 输出日志事件的发生位置 类全民.方法(文件名:所在行号) eg:ff.main.Main.main(Main.java:18)
## %F: 输出日志消息产生时所在的文件名称  %L: 输出代码中的行号
## %m: 输出代码中指定的消息,产生的日志具体信息 %n: 输出一个回车换行符
## %20c：指定输出category的名称，最小的宽度是20，如果category的名称小于20的话，默认的情况下右对齐 
## - ：左对齐  例如 %-20c 不够20位 左对齐
## %20.30c:（长度为20~30的意思）如果小于20就补空格，并且右对齐，如果其名称长于30字符，就从左边较远输出的字符截掉
log4j.appender.CONSOLE.layout.ConversionPattern=%d [%t] - %l %-5p - %m%n 

## 在这里可以设置该包输出的级别
#log4j.logger.ff.main=Debug,SPRING
log4j.logger.ff.communication.impl.TCPListener=Debug,SPRING
log4j.appender.SPRING=org.apache.log4j.DailyRollingFileAppender
log4j.appender.SPRING.Threshold=DEBUG
log4j.appender.SPRING.ImmediateFlush=true
log4j.appender.SPRING.File=log/main.log
## 默认true，false表示会覆盖
log4j.appender.SPRING.Append=true
log4j.appender.SPRING.layout=org.apache.log4j.PatternLayout
log4j.appender.SPRING.layout.ConversionPattern=%d [%t] - %l %-5p - %m%n 
log4j.appender.SPRING.DatePattern='.'yyyy-MM-dd'.log'
#log4j.appender.SPRING.MaxBackupIndex=3

log4j.logger.ff.main= WARN, spring
log4j.logger.org.tap.gc= DEBUG, spring
log4j.appender.spring=org.apache.log4j.DailyRollingFileAppender
log4j.appender.spring.File=log/spring.log
log4j.appender.spring.DatePattern='.'yyyy-MM-dd'.log'
#log4j.appender.spring.MaxBackupIndex=3
log4j.appender.spring.layout=org.apache.log4j.PatternLayout
log4j.appender.spring.layout.ConversionPattern=%d [%16.16t] %-20.20c{1} %-5p - %m%n
log4j.appender.spring.encoding=UTF-8